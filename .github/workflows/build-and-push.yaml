name: Build and Push Image

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]'
    branches:
      - develop

jobs:
  metadata:
    if: github.ref_type == 'tag' || !contains(github.event.head_commit.message, '[skip gha]')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.RELEASE_VERSION }}
      build_version: ${{ env.BUILD_VERSION }}
      branch: ${{ env.BRANCH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Determine version and branch info
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
            BRANCH="$(git for-each-ref --format='%(refname:short)' --contains=HEAD refs/remotes | sed -E 's#^origin/##' | head -n1)"
            BRANCH="$(echo "$BRANCH" | xargs)"
            BRANCH="${BRANCH:-develop}"
          else
            VERSION="$(git describe --tags --always --dirty)"
            BRANCH="${{ github.ref_name }}"
          fi

          echo "RELEASE_VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "BRANCH=$BRANCH" >> "$GITHUB_ENV"
          echo "BUILD_VERSION=$(date +'%Y%m%d')" >> "$GITHUB_ENV"

          echo "Detected version=$VERSION, branch=$BRANCH"

  build_and_push_docker:
    if: github.ref_type == 'tag' || !contains(github.event.head_commit.message, '[skip gha]')
    runs-on: ubuntu-latest
    needs: metadata
    permissions:
      packages: write
      contents: read
    env:
      version: ${{ needs.metadata.outputs.version }}
      build_version: ${{ needs.metadata.outputs.build_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image tags
        run: |
          IMG="ghcr.io/${{ github.repository }}"
          if [ "${{ github.ref_type }}" = "tag" ]; then
            echo "IMAGE_TAGS=$IMG:${{ env.version }},$IMG:latest" >> "$GITHUB_ENV"
          else
            echo "IMAGE_TAGS=$IMG:${{ env.version }}" >> "$GITHUB_ENV"
          fi

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          build-args: |
            VERSION=${{ env.version }}
            BUILD_VERSION=${{ env.build_version }}
          platforms: linux/amd64
          push: true
          tags: ${{ env.IMAGE_TAGS }}

  update_deployment:
    if: github.ref_type == 'tag' || !contains(github.event.head_commit.message, '[skip gha]')
    runs-on: ubuntu-latest
    needs: [metadata, build_and_push_docker]
    permissions:
      contents: write
    env:
      branch: ${{ needs.metadata.outputs.branch }}
      version: ${{ needs.metadata.outputs.version }}
    steps:
      - name: Get Green Ecolution App Token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          permission-contents: write

      - name: Checkout code (with app token for push)
        uses: actions/checkout@v5
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0
          fetch-tags: true

      - name: Install yq
        uses: dcarbone/install-yq-action@v1.3.1
        with:
          version: 'v4.45.4'
          force: true

      - name: Update values (prod on tag, stage otherwise) + bump Chart.appVersion & package.json on tag; commit & push
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
        run: |
          set -euo pipefail

          if [ "${{ github.ref_type }}" = "tag" ]; then
            FILE="k8s/values/prod.yaml"
          else
            FILE="k8s/values/stage.yaml"
          fi
          echo "Target values file: $FILE"

          yq -i '.image.tag = strenv(version)' "$FILE"

          if [ "${{ github.ref_type }}" = "tag" ]; then
            echo "Bumping Chart.yaml appVersion -> $version"
            yq -i '.appVersion = strenv(version)' "k8s/Chart.yaml"

            if [ -f package.json ]; then
              echo "Bumping package.json version -> $version"
              yq -i -o=json '.version = strenv(version)' package.json
            else
              echo "package.json not found (skip)"
            fi
          fi

          USER_ID="$(gh api "/users/${APP_SLUG}[bot]" --jq .id)"
          git config --global user.name  "${APP_SLUG}[bot]"
          git config --global user.email "${USER_ID}+${APP_SLUG}[bot]@users.noreply.github.com"

          git add "$FILE" "k8s/Chart.yaml" package.json 2>/dev/null || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          if [ "${{ github.ref_type }}" = "tag" ]; then
            MSG="chore: bump prod image/chart/app version to ${version} [skip gha]"
          else
            MSG="chore: update stage image to ${version} [skip gha]"
          fi
          git commit -m "$MSG"

          TARGET_BRANCH="${branch:-develop}"

          if git fetch origin "$TARGET_BRANCH" && git rebase "origin/$TARGET_BRANCH"; then
            if git push origin "HEAD:$TARGET_BRANCH"; then
              echo "Pushed to $TARGET_BRANCH"
              exit 0
            fi
          fi

          echo "Fast-forward Push/Rebase failed -> creating PR instead"
          echo "PR_BRANCH=ci/bump-${TARGET_BRANCH}-$(date +%s)" >> $GITHUB_ENV

      - name: Create PR with changes (fallback)
        if: env.PR_BRANCH != ''
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.app-token.outputs.token }}
          branch: ${{ env.PR_BRANCH }}
          base: ${{ env.TARGET_BRANCH || needs.metadata.outputs.branch }}
          title: 'chore: bump image/version â†’ ${{ env.version }}'
          body: 'automatic update. please merge'
          commit-message: 'chore: bump image/version to ${{ env.version }} [skip gha]'
          labels: ci
